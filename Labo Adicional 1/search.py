import numpy as np
import pandas as pd
import networkx as nx
from networkx.drawing.nx_pylab import draw_networkx as draw_graph
from tqdm import tqdm

#aristas = [(0, 1), (0, 2), (0, 4), (1, 2), (1, 3), (1, 5), (2, 3), (2, 4), (2, 6), (3, 4), (3, 5), (4, 1), (4, 5), (4, 6), (5, 0), (5, 2), (5, 6), (6, 0), (6, 1), (6, 3)]

class Grafo():
    def __init__(self, aristas):
        # Convierto lista de tuplas (x, y) a lista de conjuntos {x, y}
        self.aristas = [{x, y} for x, y in aristas]

        # Asumo que existen todos los nodos del 0 al max de aristas
        # n: Numero de nodos
        self.n = 1 + max([max(a, b) for a, b in self.aristas])

        # Tipo de los valores de la tabla de distancias desconocidos
        self.null = np.nan

        # Lleno diagonal de ceros, pues nunca los visito como nodos
        self.dist = {}

        # Para visualizar matrices grandes en pandas
        pd.set_option('display.max_rows', self.n)
        pd.set_option('display.max_columns', self.n)
        pd.set_option('display.width', None)

    def calcular_distancia(self, a, b):
        """ Calcula distancia mínima entre todos los nodos del grafo
                :param a: ID de nodo a : Int
                :param b: ID de nodo b : Int
                :return: Distancia mínima entre nodos a y b : Int
                """
        return self.calcular_distancia_recur(a, b, self.aristas, d=0)

    def calcular_distancia_recur(self, a, b, aristas, d=0):
        # Caso 0: Son iguales
        if a == b:
            self.dist[(a, a)] = 0
            return d

        # Caso 1: Son vecinos
        d += 1
        if {a, b} in self.aristas:
            if (a, b) not in self.dist.keys():
                self.dist[(a, b)] = 1
                self.dist[(b, a)] = 1
            return d

        # Calculo todas las distancias
        # Si no, "arranco" de a y "llego" a b
        #aristas = self.aristas.copy()
        d0 = d
        ds = []
        if d==1:
            iter_aristas = tqdm(aristas)
        else:
            iter_aristas = aristas

        for x, y in iter_aristas:
            d = d0
            # Guardo una copia de las aristas SIN incluir ésta misma
            # La uso para el llamado recursivo
            aristas_sig = aristas.copy()
            aristas_sig.remove({x, y})

            if x == b or y == b:
                # Llegué a b!
                # Tupla (otro_nodo, b) o (b, otro_nodo)
                otro_nodo = y if x == b else x

                if (otro_nodo, b) not in self.dist.keys() or self.dist[(otro_nodo, b)] > d:
                    self.dist[(otro_nodo, b)] = d
                    self.dist[(b, otro_nodo)] = d

            if x==a or y==a:
                otro_nodo = y if x == a else x
                d = self.calcular_distancia_recur(otro_nodo, b, aristas_sig, d)
                ds.append(d)
                if (y, b) not in self.dist.keys() or self.dist[(y, b)] > d:
                    self.dist[(otro_nodo, b)] = d
                    self.dist[(b, otro_nodo)] = d

        if ds == []:
            # Camino desde a sin encontrar b (tengo que devolver algún valor)
            return np.inf
        else:
            # Minima distancia entre todos los caminos encontrados
            # comenzando desde a hasta b
            return min(ds)

    def mostrar_distancias(self):
        """Muestra la matriz de distancias calculadas sobre este grafo"""
        distancias = pd.DataFrame(self.null * np.ones(shape=(self.n, self.n)), dtype="Int64")

        for xy, dist in self.dist.items():
            x, y = xy
            distancias[x][y] = dist
            distancias[y][x] = dist

        print(distancias)

    def llenar_diagonal(self):
        self.dist = {(a, a): 0 for a in range(self.n)}

    def renderizar(self):
        # Codigo ejemplo de networkx
        G = nx.Graph()  # or DiGraph, MultiGraph, MultiDiGraph, etc
        G.add_edges_from([(x, y) for x, y in self.aristas])
        draw_graph(G)

def coords_a_nodos(coords):
    nodos = {}
    num_nodo = 0

    for coord_a, coord_b in coords:
        a_x, a_y = coord_a
        b_x, b_y = coord_b
        # Keep indexing nodes
        if coord_a not in nodos.keys():
            nodos[coord_a] = num_nodo
            num_nodo += 1
        if coord_b not in nodos.keys():
            nodos[coord_b] = num_nodo
            num_nodo += 1

    return [(nodos[c_a], nodos[c_b]) for c_a, c_b in coords], nodos

if __name__ == "__main__":
    aristas = [(0, 1), (0, 2), (0, 4), (1, 2), (1, 3), (1, 5), (2, 3), (2, 4), (2, 6), (3, 0), (3, 4), (3, 5), (4, 1),
               (4, 5), (4, 6), (5, 0), (5, 2), (5, 6), (6, 0), (6, 1), (6, 3)]
    coords = [((0, 0), (0, 1)), ((0, 0), (1, 0)), ((0, 1), (0, 2)), ((0, 1), (1, 1)), ((0, 2), (0, 3)), ((0, 2), (1, 2)), ((0, 3), (0, 4)), ((0, 3), (1, 3)), ((0, 4), (0, 5)), ((0, 4), (1, 4)), ((0, 5), (0, 6)), ((0, 5), (1, 5)), ((0, 6), (0, 7)), ((0, 6), (1, 6)), ((0, 7), (0, 8)), ((0, 7), (1, 7)), ((0, 8), (0, 9)), ((0, 8), (1, 8)), ((0, 9), (0, 10)), ((0, 9), (1, 9)), ((0, 10), (0, 11)), ((0, 10), (1, 10)), ((0, 11), (0, 12)), ((0, 11), (1, 11)), ((0, 12), (0, 13)), ((0, 12), (1, 12)), ((0, 13), (0, 14)), ((0, 13), (1, 13)), ((0, 14), (0, 15)), ((0, 14), (1, 14)), ((0, 15), (1, 15)), ((1, 0), (1, 1)), ((1, 0), (2, 0)), ((1, 1), (1, 2)), ((1, 1), (2, 1)), ((1, 2), (1, 3)), ((1, 2), (2, 2)), ((1, 3), (1, 4)), ((1, 3), (2, 3)), ((1, 4), (1, 5)), ((1, 4), (2, 4)), ((1, 5), (1, 6)), ((1, 5), (2, 5)), ((1, 6), (1, 7)), ((1, 6), (2, 6)), ((1, 7), (1, 8)), ((1, 7), (2, 7)), ((1, 8), (1, 9)), ((1, 8), (2, 8)), ((1, 9), (1, 10)), ((1, 9), (2, 9)), ((1, 10), (1, 11)), ((1, 10), (2, 10)), ((1, 11), (1, 12)), ((1, 11), (2, 11)), ((1, 12), (1, 13)), ((1, 12), (2, 12)), ((1, 13), (1, 14)), ((1, 13), (2, 13)), ((1, 14), (1, 15)), ((1, 14), (2, 14)), ((1, 15), (2, 15)), ((2, 0), (2, 1)), ((2, 0), (3, 0)), ((2, 1), (2, 2)), ((2, 1), (3, 1)), ((2, 2), (2, 3)), ((2, 2), (3, 2)), ((2, 3), (2, 4)), ((2, 3), (3, 3)), ((2, 4), (2, 5)), ((2, 4), (3, 4)), ((2, 5), (2, 6)), ((2, 5), (3, 5)), ((2, 6), (2, 7)), ((2, 6), (3, 6)), ((2, 7), (2, 8)), ((2, 7), (3, 7)), ((2, 8), (2, 9)), ((2, 8), (3, 8)), ((2, 9), (2, 10)), ((2, 9), (3, 9)), ((2, 10), (2, 11)), ((2, 10), (3, 10)), ((2, 11), (2, 12)), ((2, 11), (3, 11)), ((2, 12), (2, 13)), ((2, 12), (3, 12)), ((2, 13), (2, 14)), ((2, 13), (3, 13)), ((2, 14), (2, 15)), ((2, 14), (3, 14)), ((2, 15), (3, 15)), ((3, 0), (3, 1)), ((3, 0), (4, 0)), ((3, 1), (3, 2)), ((3, 1), (4, 1)), ((3, 2), (3, 3)), ((3, 2), (4, 2)), ((3, 3), (3, 4)), ((3, 3), (4, 3)), ((3, 4), (3, 5)), ((3, 4), (4, 4)), ((3, 5), (3, 6)), ((3, 5), (4, 5)), ((3, 6), (3, 7)), ((3, 6), (4, 6)), ((3, 7), (3, 8)), ((3, 7), (4, 7)), ((3, 8), (3, 9)), ((3, 8), (4, 8)), ((3, 9), (3, 10)), ((3, 9), (4, 9)), ((3, 10), (3, 11)), ((3, 10), (4, 10)), ((3, 11), (3, 12)), ((3, 11), (4, 11)), ((3, 12), (3, 13)), ((3, 12), (4, 12)), ((3, 13), (3, 14)), ((3, 13), (4, 13)), ((3, 14), (3, 15)), ((3, 14), (4, 14)), ((3, 15), (4, 15)), ((4, 0), (4, 1)), ((4, 0), (5, 0)), ((4, 1), (4, 2)), ((4, 1), (5, 1)), ((4, 2), (4, 3)), ((4, 2), (5, 2)), ((4, 3), (4, 4)), ((4, 3), (5, 3)), ((4, 4), (4, 5)), ((4, 4), (5, 4)), ((4, 5), (4, 6)), ((4, 5), (5, 5)), ((4, 6), (4, 7)), ((4, 6), (5, 6)), ((4, 7), (4, 8)), ((4, 7), (5, 7)), ((4, 8), (4, 9)), ((4, 8), (5, 8)), ((4, 9), (4, 10)), ((4, 9), (5, 9)), ((4, 10), (4, 11)), ((4, 10), (5, 10)), ((4, 11), (4, 12)), ((4, 11), (5, 11)), ((4, 12), (4, 13)), ((4, 12), (5, 12)), ((4, 13), (4, 14)), ((4, 13), (5, 13)), ((4, 14), (4, 15)), ((4, 14), (5, 14)), ((4, 15), (5, 15)), ((5, 0), (5, 1)), ((5, 0), (6, 0)), ((5, 1), (5, 2)), ((5, 1), (6, 1)), ((5, 2), (5, 3)), ((5, 2), (6, 2)), ((5, 3), (5, 4)), ((5, 3), (6, 3)), ((5, 4), (5, 5)), ((5, 4), (6, 4)), ((5, 5), (5, 6)), ((5, 5), (6, 5)), ((5, 6), (5, 7)), ((5, 6), (6, 6)), ((5, 7), (5, 8)), ((5, 7), (6, 7)), ((5, 8), (5, 9)), ((5, 8), (6, 8)), ((5, 9), (5, 10)), ((5, 9), (6, 9)), ((5, 10), (5, 11)), ((5, 10), (6, 10)), ((5, 11), (5, 12)), ((5, 11), (6, 11)), ((5, 12), (5, 13)), ((5, 12), (6, 12)), ((5, 13), (5, 14)), ((5, 13), (6, 13)), ((5, 14), (5, 15)), ((5, 14), (6, 14)), ((5, 15), (6, 15)), ((6, 0), (6, 1)), ((6, 0), (7, 0)), ((6, 1), (6, 2)), ((6, 1), (7, 1)), ((6, 2), (6, 3)), ((6, 2), (7, 2)), ((6, 3), (6, 4)), ((6, 3), (7, 3)), ((6, 4), (6, 5)), ((6, 4), (7, 4)), ((6, 5), (6, 6)), ((6, 5), (7, 5)), ((6, 6), (6, 7)), ((6, 6), (7, 6)), ((6, 7), (6, 8)), ((6, 7), (7, 7)), ((6, 8), (6, 9)), ((6, 8), (7, 8)), ((6, 9), (6, 10)), ((6, 9), (7, 9)), ((6, 10), (6, 11)), ((6, 10), (7, 10)), ((6, 11), (6, 12)), ((6, 11), (7, 11)), ((6, 12), (6, 13)), ((6, 12), (7, 12)), ((6, 13), (6, 14)), ((6, 13), (7, 13)), ((6, 14), (6, 15)), ((6, 14), (7, 14)), ((6, 15), (7, 15)), ((7, 0), (7, 1)), ((7, 0), (8, 0)), ((7, 1), (7, 2)), ((7, 1), (8, 1)), ((7, 2), (7, 3)), ((7, 2), (8, 2)), ((7, 3), (7, 4)), ((7, 3), (8, 3)), ((7, 4), (7, 5)), ((7, 4), (8, 4)), ((7, 5), (7, 6)), ((7, 5), (8, 5)), ((7, 6), (7, 7)), ((7, 6), (8, 6)), ((7, 7), (7, 8)), ((7, 7), (8, 7)), ((7, 8), (7, 9)), ((7, 8), (8, 8)), ((7, 9), (7, 10)), ((7, 9), (8, 9)), ((7, 10), (7, 11)), ((7, 10), (8, 10)), ((7, 11), (7, 12)), ((7, 11), (8, 11)), ((7, 12), (7, 13)), ((7, 12), (8, 12)), ((7, 13), (7, 14)), ((7, 13), (8, 13)), ((7, 14), (7, 15)), ((7, 14), (8, 14)), ((7, 15), (8, 15)), ((8, 0), (8, 1)), ((8, 0), (9, 0)), ((8, 1), (8, 2)), ((8, 1), (9, 1)), ((8, 2), (8, 3)), ((8, 2), (9, 2)), ((8, 3), (8, 4)), ((8, 3), (9, 3)), ((8, 4), (8, 5)), ((8, 4), (9, 4)), ((8, 5), (8, 6)), ((8, 5), (9, 5)), ((8, 6), (8, 7)), ((8, 6), (9, 6)), ((8, 7), (8, 8)), ((8, 7), (9, 7)), ((8, 8), (8, 9)), ((8, 8), (9, 8)), ((8, 9), (8, 10)), ((8, 9), (9, 9)), ((8, 10), (8, 11)), ((8, 10), (9, 10)), ((8, 11), (8, 12)), ((8, 11), (9, 11)), ((8, 12), (8, 13)), ((8, 12), (9, 12)), ((8, 13), (8, 14)), ((8, 13), (9, 13)), ((8, 14), (8, 15)), ((8, 14), (9, 14)), ((8, 15), (9, 15)), ((9, 0), (9, 1)), ((9, 0), (10, 0)), ((9, 1), (9, 2)), ((9, 1), (10, 1)), ((9, 2), (9, 3)), ((9, 2), (10, 2)), ((9, 3), (9, 4)), ((9, 3), (10, 3)), ((9, 4), (9, 5)), ((9, 4), (10, 4)), ((9, 5), (9, 6)), ((9, 5), (10, 5)), ((9, 6), (9, 7)), ((9, 6), (10, 6)), ((9, 7), (9, 8)), ((9, 7), (10, 7)), ((9, 8), (9, 9)), ((9, 8), (10, 8)), ((9, 9), (9, 10)), ((9, 9), (10, 9)), ((9, 10), (9, 11)), ((9, 10), (10, 10)), ((9, 11), (9, 12)), ((9, 11), (10, 11)), ((9, 12), (9, 13)), ((9, 12), (10, 12)), ((9, 13), (9, 14)), ((9, 13), (10, 13)), ((9, 14), (9, 15)), ((9, 14), (10, 14)), ((9, 15), (10, 15)), ((10, 0), (10, 1)), ((10, 0), (11, 0)), ((10, 1), (10, 2)), ((10, 1), (11, 1)), ((10, 2), (10, 3)), ((10, 2), (11, 2)), ((10, 3), (10, 4)), ((10, 3), (11, 3)), ((10, 4), (10, 5)), ((10, 4), (11, 4)), ((10, 5), (10, 6)), ((10, 5), (11, 5)), ((10, 6), (10, 7)), ((10, 6), (11, 6)), ((10, 7), (10, 8)), ((10, 7), (11, 7)), ((10, 8), (10, 9)), ((10, 8), (11, 8)), ((10, 9), (10, 10)), ((10, 9), (11, 9)), ((10, 10), (10, 11)), ((10, 10), (11, 10)), ((10, 11), (10, 12)), ((10, 11), (11, 11)), ((10, 12), (10, 13)), ((10, 12), (11, 12)), ((10, 13), (10, 14)), ((10, 13), (11, 13)), ((10, 14), (10, 15)), ((10, 14), (11, 14)), ((10, 15), (11, 15)), ((11, 0), (11, 1)), ((11, 0), (12, 0)), ((11, 1), (11, 2)), ((11, 1), (12, 1)), ((11, 2), (11, 3)), ((11, 2), (12, 2)), ((11, 3), (11, 4)), ((11, 3), (12, 3)), ((11, 4), (11, 5)), ((11, 4), (12, 4)), ((11, 5), (11, 6)), ((11, 5), (12, 5)), ((11, 6), (11, 7)), ((11, 6), (12, 6)), ((11, 7), (11, 8)), ((11, 7), (12, 7)), ((11, 8), (11, 9)), ((11, 8), (12, 8)), ((11, 9), (11, 10)), ((11, 9), (12, 9)), ((11, 10), (11, 11)), ((11, 10), (12, 10)), ((11, 11), (11, 12)), ((11, 11), (12, 11)), ((11, 12), (11, 13)), ((11, 12), (12, 12)), ((11, 13), (11, 14)), ((11, 13), (12, 13)), ((11, 14), (11, 15)), ((11, 14), (12, 14)), ((11, 15), (12, 15)), ((12, 0), (12, 1)), ((12, 0), (13, 0)), ((12, 1), (12, 2)), ((12, 1), (13, 1)), ((12, 2), (12, 3)), ((12, 2), (13, 2)), ((12, 3), (12, 4)), ((12, 3), (13, 3)), ((12, 4), (12, 5)), ((12, 4), (13, 4)), ((12, 5), (12, 6)), ((12, 5), (13, 5)), ((12, 6), (12, 7)), ((12, 6), (13, 6)), ((12, 7), (12, 8)), ((12, 7), (13, 7)), ((12, 8), (12, 9)), ((12, 8), (13, 8)), ((12, 9), (12, 10)), ((12, 9), (13, 9)), ((12, 10), (12, 11)), ((12, 10), (13, 10)), ((12, 11), (12, 12)), ((12, 11), (13, 11)), ((12, 12), (12, 13)), ((12, 12), (13, 12)), ((12, 13), (12, 14)), ((12, 13), (13, 13)), ((12, 14), (12, 15)), ((12, 14), (13, 14)), ((12, 15), (13, 15)), ((13, 0), (13, 1)), ((13, 0), (14, 0)), ((13, 1), (13, 2)), ((13, 1), (14, 1)), ((13, 2), (13, 3)), ((13, 2), (14, 2)), ((13, 3), (13, 4)), ((13, 3), (14, 3)), ((13, 4), (13, 5)), ((13, 4), (14, 4)), ((13, 5), (13, 6)), ((13, 5), (14, 5)), ((13, 6), (13, 7)), ((13, 6), (14, 6)), ((13, 7), (13, 8)), ((13, 7), (14, 7)), ((13, 8), (13, 9)), ((13, 8), (14, 8)), ((13, 9), (13, 10)), ((13, 9), (14, 9)), ((13, 10), (13, 11)), ((13, 10), (14, 10)), ((13, 11), (13, 12)), ((13, 11), (14, 11)), ((13, 12), (13, 13)), ((13, 12), (14, 12)), ((13, 13), (13, 14)), ((13, 13), (14, 13)), ((13, 14), (13, 15)), ((13, 14), (14, 14)), ((13, 15), (14, 15)), ((14, 0), (14, 1)), ((14, 0), (15, 0)), ((14, 1), (14, 2)), ((14, 1), (15, 1)), ((14, 2), (14, 3)), ((14, 2), (15, 2)), ((14, 3), (14, 4)), ((14, 3), (15, 3)), ((14, 4), (14, 5)), ((14, 4), (15, 4)), ((14, 5), (14, 6)), ((14, 5), (15, 5)), ((14, 6), (14, 7)), ((14, 6), (15, 6)), ((14, 7), (14, 8)), ((14, 7), (15, 7)), ((14, 8), (14, 9)), ((14, 8), (15, 8)), ((14, 9), (14, 10)), ((14, 9), (15, 9)), ((14, 10), (14, 11)), ((14, 10), (15, 10)), ((14, 11), (14, 12)), ((14, 11), (15, 11)), ((14, 12), (14, 13)), ((14, 12), (15, 12)), ((14, 13), (14, 14)), ((14, 13), (15, 13)), ((14, 14), (14, 15)), ((14, 14), (15, 14)), ((14, 15), (15, 15)), ((15, 0), (15, 1)), ((15, 1), (15, 2)), ((15, 2), (15, 3)), ((15, 3), (15, 4)), ((15, 4), (15, 5)), ((15, 5), (15, 6)), ((15, 6), (15, 7)), ((15, 7), (15, 8)), ((15, 8), (15, 9)), ((15, 9), (15, 10)), ((15, 10), (15, 11)), ((15, 11), (15, 12)), ((15, 12), (15, 13)), ((15, 13), (15, 14)), ((15, 14), (15, 15))]

    # aristas = [(0, 1), (1, 2), (2, 3), (3, 4)]

    # Creo el grafo
    aristas, ids = coords_a_nodos(coords)


    aristas = [(0,1),(0,3),(1,2),(1,4),(2,5),(3,4),(3,6),(4,7),(4,5),(5,8),(6,7),(7,8)]


    g = Grafo(aristas)
    #g.computar_diagonal()
    #g.mostrar()
    #g.computar_aristas()
    #g.mostrar()

    #print("Distancia:", g.distancia(0,3))
    nodo_a = 0
    nodo_b = 8
    d =  g.calcular_distancia(nodo_a, nodo_b)

    print("\n\nDistancia entre nodos {} y {} = {}".format(nodo_a, nodo_b, d))
    #g.mostrar_distancias()
    g.renderizar()
